function GetPlayerInventory(len)	local str = net.ReadTable()	LocalPlayer().c_Inventory = RecreateInventory(str, "container_playerinventory")	if LocalPlayer().v_InventoryPanel then		LocalPlayer().v_InventoryPanel:RefreshInventory()	end	--Despite being the 'other' inventory, it still updates it if we have open the 'give tab' which give the container items from our inventory.	if LocalPlayer().v_InventoryPanelOther then		LocalPlayer().v_InventoryPanelOther:RefreshInventory()	end	if LocalPlayer().v_ExaminePanel then		LocalPlayer().v_ExaminePanel:Refresh()	end	RefreshWeapons()	net.Start("requestWeapons")	net.SendToServer()endnet.Receive("sendInventory", GetPlayerInventory)function GetPlayerItemUpdate(len)	local item = net.ReadTable()	local tab = RecreateItem(item)	LocalPlayer().c_Inventory:GetContainer()[tab:GetIDRef()] = tab	if LocalPlayer().v_InventoryPanel then		LocalPlayer().v_InventoryPanel:RefreshInventory()	end	if LocalPlayer().v_InventoryPanelOther then		LocalPlayer().v_InventoryPanelOther:RefreshInventory()	end	--This updates our examine panel if we happen to have one open.	if LocalPlayer().v_ExaminePanel then		LocalPlayer().v_ExaminePanel:Refresh()	end	RefreshWeapons()endnet.Receive("updateInventoryItem", GetPlayerItemUpdate)--Called from the server to client when the client presses F3.function GM:OpenInventory()	if not LocalPlayer():Alive() then return end	if not LocalPlayer().c_InGame then return end	if LocalPlayer().v_InventoryPanel then LocalPlayer().v_InventoryPanel:FlushRemove() return end	local inventory = vgui.Create("dInventory")	inventory:SetPos(5, 5)	inventory:SetSize(ScrW() - 10, ScrH() * 0.6)	inventory:SetupInventory()	inventory:ToggleBackgroundBlur()	local equipment = vgui.Create("dEquipment")	equipment:SetPos(5, ScrH() * 0.6 + 5)	equipment:SetSize(ScrW() - 10, ScrH() * 0.4 - 10)	inventory.v_EquipmentPanel = equipment	equipment:DoSetup()endfunction GetEntityInventory()	local str = net.ReadTable()	local otherinv = RecreateSimpleInventory(str)	GAMEMODE:OpenOtherInventory(otherinv)endnet.Receive("sendOtherInventory", GetEntityInventory)function GetMerchantInventory()	local str = net.ReadTable()	local otherinv = RecreateInventory(str)	for _, item in pairs(otherinv:GetContainer()) do		item:SetAmount(1)		for _, tab in pairs(str.Items) do			if tab.DataName == item:GetDataName() then				item.Price = tab.Price				break			end		end	end	GAMEMODE:OpenMerchantInventory(otherinv)endnet.Receive("sendMerchantInventory", GetMerchantInventory)function GM:OpenOtherInventory(inv, methodtoadd)	if LocalPlayer().v_InventoryPanelOther then		LocalPlayer().v_InventoryPanelOther.Inventory = inv		LocalPlayer().v_InventoryPanelOther:RefreshInventory()		return	end	local inventory = vgui.Create("dInventoryContainer")		inventory:SetPos(ScrW() * 0.15, ScrH() * 0.15)		inventory:SetSize(ScrW() * 0.7, ScrH() * 0.7)		inventory.Inventory = inv		inventory:ToggleBackgroundBlur()		if methodtoadd ~= INVENTORY_CANNOT_ADD then			inventory:SetupInventory(methodtoadd)		else			inventory:SetupInventory()		endendfunction GM:OpenMerchantInventory(inv)	if LocalPlayer().v_InventoryPanel then LocalPlayer().v_InventoryPanel:FlushRemove() return end	local inventory = vgui.Create("dInventoryMerchant")		inventory:SetPos(ScrW()*0.05, ScrH()*0.05)		inventory:SetSize(ScrW()*0.9, ScrH()*0.9)		inventory.Inventory = inv		inventory:ToggleBackgroundBlur()		inventory:SetupInventory_Buy()endfunction CloseInventory()	if LocalPlayer().v_InventoryPanel then		LocalPlayer().v_InventoryPanel:FlushRemove()	end	if LocalPlayer().v_InventoryPanelOther then		LocalPlayer().v_InventoryPanelOther:FlushRemove()	endend